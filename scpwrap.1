.\" 
.\" (c) 2013 randomnoun. All Rights Reserved. This work is licensed under a
.\" BSD Simplified License. (http://www.randomnoun.com/bsd-simplified.html)
.\" 
.\" scpwrap.groff
.\" $Id$
.\"
.\" Man page for the scpwrap utility
.\" 
.\" Process this file with
.\" 
.\"   visual pager:         groff -man -Tascii scpwrap.groff | less
.\"   HTML:                 groff -man -Thtml scpwrap.groff > scpwrap.html
.\"   HTML with hyperlinks: man2html -H code.randomnoun.com -M /man2html scpwrap.groff > scpwrap.html
.\"   fixed width HTML:     groff -man -Tascii scpwrap.groff | perl -i -pe 's!(.)\x08\g1!<b>\1</b>!g; s!</b>(\s*)<b>!\1!g; s!_\x08(.)!<u>\1</u>!g;; s!</u>(\s*)<u>!\1!g;' > scpwrap.html
.\"
.TH SCPWRAP 1 "OCTOBER 2013" vmaint "User Commands"
.SH NAME
scpwrap \- a wrapper for scp to convert its output into machine-readable format
.SH SYNOPSIS
.nh \" no hyphenating
.na \" no right-margin adjustment
.B scpwrap [--js] [--stdoutTemplate 
.I template
.B ] [--stderrTemplate 
.I template
.B ] [--startTemplate
.I template
.B ] [--progressTemplate
.I template
.B ] [--endTemplate
.I template
.B ] --
.I scp-options
.B ...
.ad \" re-enable right-margin adjustment (i.e. full justification)
.SH DESCRIPTION
.B scpwrap
wraps the 
.BR scp (1)
command such that the output generated by that command is
converted into a format more easily processed by other
commands.  
.P
.BR scp (1) 
progress information is captured and converted into a  
machine-readable format for use in more sophisticated user interfaces
(which in turn would require even more effort to turn back into
a machine-readable format). And so the circle of life continues. 
.P
The built-in text and javascript output templates are suitable for 
.BR zenity (1),
or some as-yet-to-be-documented javascript processor, respectively.
See the \fBEXAMPLES\fR section to see the general syntax of these defaults. 
.SH OPTIONS
.IP \fB--js\fR
Use the default javascript templates rather than the default
text templates (see the \fBDEFAULTS\fR section below).

This switch also enables javascript-output escaping
(see the \fBJAVASCRIPT OUTPUT ESCAPES\fR section below). 
.IP "\fB--stdoutTemplate\fR \fItemplate\fR"
Use the supplied 
.I template
to generate machine-readable text when unrecognised output is 
detected on stdout. The placeholder
\fB%s\fR in the template will be replaced by the text received on stdout.
.IP "\fB--stderrTemplate\fR \fItemplate\fR"
Use the supplied 
.I template
to generate machine-readable text when any output is
detected on stderr (e.g. to display text contained in the remote system's 
.B sshd (8) 
Banner file). The placeholder
\fB%s\fR in the template will be replaced by the text received on stderr.
.IP "\fB--startTemplate\fR \fItemplate\fR"
Use the supplied 
.I template
to generate machine-readable text as scp progress begins.
.IP "\fB--progressTemplate\fR \fItemplate\fR"
Use the supplied 
.I template
to generate machine-readable text as scp progresses. 
The placeholders \fB%f\fR, \fB%p\fR, \fB%t\fR,
\fB%s\fR and \fB%e\fR are available (see the \fBPLACEHOLDERS\fR section below) 
.IP "\fB--endTemplate\fR \fItemplate\fR"
Use the supplied 
.I template
when scp completes. The \fI%c\fR placeholder is available.
.IP \fIscp-options\fR
these command-line options are passed directly to 
.BR scp (1)
and should conform to the expected syntax of that command.
.SH PLACEHOLDERS
Placeholders can (and should) be embedded in template strings, which will
be replaced by the appropriate value when the stdout/stderr of  
.BR scp (1)
is parsed by this utility. Most placeholders are only available
in specific template types.
.P
Recognised placeholders are:
.TP 5
\fB%s\fR
Free-form stdout or stderr text
.TP
\fB%f\fR
The name of the file being copied (e.g. \fBtest.txt\fR)
.TP
\fB%p\fR
The percentage progress of the current file being copied (e.g. \fB13\fR)
.TP
\fB%t\fR
The transfer size of the current file being copied (e.g. \fB2112KB\fR)
.TP
\fB%s\fR
The transfer speed of the current file being copied (e.g. \fB2.1MB/s\fR)
.TP
\fB%e\fR
The ETA of the current file being copied (e.g. \fB--:-- or \fB05:23\fR)
.TP
\fB%c\fR
The exit code of the 
.BR scp (1)
process (e.g. \fB0\fR), or a negative number if the process was 
terminated by a signal (the absolute value of this number corresponds to 
the signal number received).
.SH PLACEHOLDER ESCAPES
The following escape sequences are recognised in placeholder strings supplied
on the command-line:
.TP 5
\fB\\n\fR
Newline
.TP
\fB\\r\fR
Carriage return
.TP
\fB\\t\fR
Tab character
.TP
\fB\\\\\fR
Backslash
.SH JAVASCRIPT OUTPUT ESCAPES
If the text generated by scp contains characters that would cause 
javascript parsing errors, and the \fB--js\fR command-line option is in
effect, then the strings substituted into the \fB%s\fR placeholder will
be javascript-escaped (e.g. newlines will be replaced by \fB\\n\fR, 
characters above ASCII codepoint 127 will be replaced by \fB\\u0000\fR-style
sequences.)  
.SH DEFAULTS
The following defaults are used, in the absence of any template overrides:
.SS Text output (without --js parameter)
Note that many templates are simply "" (i.e. the empty string, 
therefore no output is generated)
.TP 20
\fB--stdoutTemplate\fR
""
.TP
\fB--stderrTemplate\fR
""
.TP
\fB--startTemplate\fR
""
.TP
\fB--progressTemplate\fR
"%p\\n"
.TP
\fB--endTemplate\fR
"" 
.SS Javascript output (with --js parameter)
The default javascript output relies on a script-visible 'ui' object, 
as shown below.
.TP 20
\fB--stdoutTemplate\fR
"ui.addOutput(\\"%s\\");\\n"
.TP
\fB--stderrTemplate\fR
"ui.addOutputError(\\"%s\\");\\n";
.TP
\fB--startTemplate\fR
"var sp = ui.startScpProgress();\\n";
.TP
\fB--progressTemplate\fR
.nf
"sp.setProgress(\\"%f\\", %p, \\"%t\\", \\"%s\\", \\"%e\\");\\n";
.fi
.TP
\fB--endTemplate\fR
"ui.stopScpProgress(%c);\\n";
.SH EXIT STATUS
The \fBscpwrap\fR command will return the same exit code as the child
\fBscp\fR process; i.e. it exits 0 on success, and >0 if an error occurs. 
.P
If a signal interrupts processing of the child process, then \fBscpwrap\fR 
terminates with an exit status of 1. The signal number can be determined 
using the \fB%c\fR placeholder to the \fB--endTemplate\fR template.   
.SH EXAMPLES
.SS Example 1 (text output)
The command

.RS
.nf
scpwrap -- -i key.pem somefile.tar.gz \\
  user@somehost:/home/user/somefile.tar.gz
.fi
.RE

might produce output something similar to the following:

.RS
.nf
0
45
47
49

  ... 20 lines omitted ...

98
100
.fi
.RE
.P

.SS Example 2 (javascript output)
The command

.RS
.nf
scpwrap --js -- -i key.pem somefile.tar.gz \\
  user@somehost:/home/user/somefile.tar.gz \\
.fi
.RE

might produce output something similar to the following:

.RS
.nf
ui.addOutputError("NOTICE TO USERS\\n");
ui.addOutputError("\\n");
ui.addOutputError("This service is for authorised clients only.\\n");
ui.addOutputError("\\n");
ui.addOutputError("This computer system is the private property of its owner, whether\\n");
ui.addOutputError("individual, corporate or government.  It is for authorized use only.\\n");
ui.addOutputError("Users (authorised or unauthorised) have no explicit or implicit\\n");
ui.addOutputError("expectation of privacy.\\n");
ui.addOutputError("\\n");
ui.addOutputError("It is a criminal offence to:\\n");
ui.addOutputError("  i. Obtain access to data without authority\\n");
ui.addOutputError("       (Penalty 2 years imprisonment)\\n");
ui.addOutputError("  ii Damage, delete, alter or insert data without authority\\n");
ui.addOutputError("       (Penalty 10 years imprisonment)\\n");
ui.addOutputError("\\n");
ui.addOutputError("For more information, see http://www.randomnoun.com/login-banner.html\\n");
var sp = ui.startScpProgress();
sp.setProgress("somefile.tar.gz", 0, "0", "0.0KB/s", "--:--");
sp.setProgress("somefile.tar.gz", 45, "2112KB", "2.1MB/s", "00:01");
sp.setProgress("somefile.tar.gz", 47, "2208KB", "1.9MB/s", "00:01");
sp.setProgress("somefile.tar.gz", 49, "2320KB", "1.7MB/s", "00:01");
sp.setProgress("somefile.tar.gz", 52, "2448KB", "1.5MB/s", "00:01");
sp.setProgress("somefile.tar.gz", 54, "2576KB", "1.4MB/s", "00:01");

  ... 20 lines omitted ...

sp.setProgress("somefile.tar.gz", 98, "4624KB", "266.7KB/s", "00:00");
sp.setProgress("somefile.tar.gz", 100, "4693KB", "187.7KB/s", "00:25");
ui.stopScpProgress(0);
.fi
.RS

.SS Example 3 (custom javascript output)
The command

.RS
.nf
scpwrap --js --stderrTemplate '' --stdoutTemplate '' \\
  --startTemplate '' --endTemplate '' \\
  --progressTemplate 'setProgress(%p);\\n' 
  -- -i key.pem somefile.tar.gz \\
  user@somehost:/home/user/somefile.tar.gz 
.fi
.RE

might produce output something similar to the following:

.RS
.nf
setProgress(0);
setProgress(45);
setProgress(47);

   ... 20 lines omitted ...

setProgress(98);
setProgress(100);
.fi
.RE
.SH BUGS
.P
It might be preferable to get the default strings from something in /etc
.P
The whole thing's a bit pointless
.SH AUTHOR
Greg Knox <knoxg at randomnoun dot com>
.SH LICENCE
(c) 2013 randomnoun. All Rights Reserved. This work is licensed under a
BSD Simplified License. (http://www.randomnoun.com/bsd-simplified.html)
.SH "SEE ALSO"
.BR vmaint (1),
http://www.randomnoun.com/wp/2013/10/31/progress-bars/
